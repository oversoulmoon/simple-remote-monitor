{"ast":null,"code":"var _jsxFileName = \"/home/trungn/OneDrive/nodeApp/client/src/components/Report.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\n/**\n *\n * @param {{hostname: string, architecture: string, platform: string,uptime: string,cpu:string,memory: string,network: string,date: string}} props\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Report(props) {\n  _s();\n  const port = 5782;\n  const INTERVAL = 2000;\n  var [status, setStatus] = useState(null);\n  const socket = io.connect(props.IP + \":\" + port);\n  function getStatus(data) {\n    socket.emit(\"get_status\", data);\n    console.log(data);\n    socket.on(\"send_Data\", data => {\n      setStatus(data);\n      setTimeout(() => {\n        getStatus(data);\n      }, INTERVAL);\n    });\n  }\n  useEffect(() => {\n    socket.emit(\"get_init\");\n    socket.on(\"send_data\", data => {\n      setStatus(data);\n      setTimeout(() => {\n        getStatus();\n      }, 2000);\n    });\n    socket.on(\"error\", () => {\n      console.log(\"error\");\n    });\n  }, []);\n\n  //   setInterval(() => {\n  //     console.log(\"querying data for\", props.IP);\n  //     socket.emit(\"get_status\",(status));\n  //     socket.on(\"send_data\", (data) => {\n  //       setStatus(data);\n  //     });\n  //   }, INTERVAL);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Report, \"BS896UqrqyybjEKvhypabDkHm2E=\");\n_c = Report;\nexport default Report;\nvar _c;\n$RefreshReg$(_c, \"Report\");","map":{"version":3,"names":["useEffect","useState","io","Report","props","port","INTERVAL","status","setStatus","socket","connect","IP","getStatus","data","emit","console","log","on","setTimeout"],"sources":["/home/trungn/OneDrive/nodeApp/client/src/components/Report.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\n/**\n *\n * @param {{hostname: string, architecture: string, platform: string,uptime: string,cpu:string,memory: string,network: string,date: string}} props\n */\nfunction Report(props) {\n  const port = 5782;\n  const INTERVAL = 2000;\n  var [status, setStatus] = useState(null);\n  const socket = io.connect(props.IP + \":\" + port);\n\n  function getStatus(data){\n    socket.emit(\"get_status\",data);\n      console.log(data);\n      socket.on(\"send_Data\",(data)=>{\n        setStatus(data);\n        setTimeout(()=>{\n            getStatus(data);\n        },INTERVAL);\n    })\n  }\n\n  useEffect(() => {\n    socket.emit(\"get_init\");\n    socket.on(\"send_data\", (data) => {\n      setStatus(data);\n      setTimeout(()=>{\n        getStatus();\n      },2000);\n    });\n    socket.on(\"error\", () => {\n        console.log(\"error\");\n    });\n  }, []);\n\n//   setInterval(() => {\n//     console.log(\"querying data for\", props.IP);\n//     socket.emit(\"get_status\",(status));\n//     socket.on(\"send_data\", (data) => {\n//       setStatus(data);\n//     });\n//   }, INTERVAL);\n\n  return (\n    <div>\n      {/* <h1>Host Name: {props.hostname}</h1>\n        <ul>\n            <li>Architecture: {props.architecture}</li>\n            <li>Platform: {props.platform}</li>\n            <li>Up Time: {props.uptime} seconds</li>\n            <li>Memory: {(props.memory.used/1000).toFixed(1)}/{(props.memory.total/1000).toFixed(1)} GB</li>\n            <li>CPU: {props.cpu[0].model}\n                <ul>\n                    {props.cpu.map((proc, idx)=>{\n                        return <li key={idx}>{proc.model} ({proc.speed}): {JSON.stringify(proc.usage)}</li>\n                    })}\n                </ul>\n            </li>\n            <li>Network: {JSON.stringify(props.network)}</li>\n        </ul> */}\n    </div>\n  );\n}\n\nexport default Report;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,EAAE,QAAQ,kBAAkB;;AAErC;AACA;AACA;AACA;AAHA;AAIA,SAASC,MAAM,CAACC,KAAK,EAAE;EAAA;EACrB,MAAMC,IAAI,GAAG,IAAI;EACjB,MAAMC,QAAQ,GAAG,IAAI;EACrB,IAAI,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMQ,MAAM,GAAGP,EAAE,CAACQ,OAAO,CAACN,KAAK,CAACO,EAAE,GAAG,GAAG,GAAGN,IAAI,CAAC;EAEhD,SAASO,SAAS,CAACC,IAAI,EAAC;IACtBJ,MAAM,CAACK,IAAI,CAAC,YAAY,EAACD,IAAI,CAAC;IAC5BE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjBJ,MAAM,CAACQ,EAAE,CAAC,WAAW,EAAEJ,IAAI,IAAG;MAC5BL,SAAS,CAACK,IAAI,CAAC;MACfK,UAAU,CAAC,MAAI;QACXN,SAAS,CAACC,IAAI,CAAC;MACnB,CAAC,EAACP,QAAQ,CAAC;IACf,CAAC,CAAC;EACJ;EAEAN,SAAS,CAAC,MAAM;IACdS,MAAM,CAACK,IAAI,CAAC,UAAU,CAAC;IACvBL,MAAM,CAACQ,EAAE,CAAC,WAAW,EAAGJ,IAAI,IAAK;MAC/BL,SAAS,CAACK,IAAI,CAAC;MACfK,UAAU,CAAC,MAAI;QACbN,SAAS,EAAE;MACb,CAAC,EAAC,IAAI,CAAC;IACT,CAAC,CAAC;IACFH,MAAM,CAACQ,EAAE,CAAC,OAAO,EAAE,MAAM;MACrBF,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAER;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,oBACE;IAAA;IAAA;IAAA;EAAA,QAgBM;AAEV;AAAC,GAzDQb,MAAM;AAAA,KAANA,MAAM;AA2Df,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}