{"ast":null,"code":"var _jsxFileName = \"/home/trungn/OneDrive/nodeApp/client/src/components/Report.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Card from \"../ui/Card\";\nimport CardRegular from \"../ui/CardRegular\";\nimport NetworkReport from \"./NetworkReport\";\nimport classes from \"./Report.module.css\";\nimport { Chart as Chartjs, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, Title } from \"chart.js\";\nimport { Pie } from \"react-chartjs-2\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartjs.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n/**\n *\n * @param {{hostname: string, architecture: string, platform: string,uptime: string,cpu:string,memory: string,network: string,date: string}} props\n */\nfunction Report(props) {\n  _s();\n  const port = 5782;\n  const INTERVAL = 2000;\n  var [status, setStatus] = useState(null);\n  var local = true;\n  var [cpuData, setCpuData] = useState([]);\n  useEffect(() => {\n    const socket = io.connect(props.IP + \":\" + port);\n    // const socket = io.connect(\"http://localhost:5782\");\n\n    socket.emit(\"get_init\");\n    socket.on(\"send_data\", data => {\n      socket.close();\n      setStatus(data);\n      getStatus(data);\n    });\n    socket.on(\"error\", () => {});\n  }, []);\n  function getStatus(data) {\n    const socket = io.connect(props.IP + \":\" + port);\n    // const socket = io.connect(\"http://localhost:5782\");\n    socket.emit(\"get_status\", data);\n    socket.on(\"send_data\", data => {\n      setStatus(data);\n      setTimeout(() => {\n        getStatus(data);\n      }, INTERVAL);\n      socket.close();\n    });\n  }\n  function generateData(memory) {\n    var used = (memory.used / 1024).toFixed(1);\n    var free = (memory.total / 1024 - memory.used / 1024).toFixed(1);\n    return {\n      labels: [\"Used\", \"Free\"],\n      datasets: [{\n        label: \"GB\",\n        data: [used, free],\n        backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\"],\n        borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\"],\n        borderWidth: 1\n      }]\n    };\n  }\n  function generateDataCPU(cpu, idx) {\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Chart.js Line Chart'\n        }\n      }\n    };\n    const labels = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n    const data = {\n      labels,\n      datasets: {\n        label: `CPU ${idx}`,\n        data\n      }\n    };\n  }\n  if (status === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.grid,\n      children: [/*#__PURE__*/_jsxDEV(CardRegular, {\n        className: classes.topRow,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: status.hostname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Architecture:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), \" \", status.architecture, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Platform:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), \" \", status.platform, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Up Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), \" \", status.uptime, \" seconds\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          data: generateData(status.memory),\n          options: {\n            maintainAspectRatio: true,\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardRegular, {\n        children: status.network.map((data, idx) => {\n          return /*#__PURE__*/_jsxDEV(NetworkReport, {\n            ...data\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.bigInfo,\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: status.cpu[0].model\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: status.cpu.map((proc, idx) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"(\", proc.speed, \"): \", JSON.stringify(proc.usage)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(Report, \"m5aV2snCxwcyYrLRe60sjGGSO1M=\");\n_c = Report;\nexport default Report;\nvar _c;\n$RefreshReg$(_c, \"Report\");","map":{"version":3,"names":["useEffect","useState","io","Card","CardRegular","NetworkReport","classes","Chart","Chartjs","ArcElement","Tooltip","Legend","CategoryScale","LinearScale","PointElement","LineElement","Title","Pie","Line","register","Report","props","port","INTERVAL","status","setStatus","local","cpuData","setCpuData","socket","connect","IP","emit","on","data","close","getStatus","setTimeout","generateData","memory","used","toFixed","free","total","labels","datasets","label","backgroundColor","borderColor","borderWidth","generateDataCPU","cpu","idx","options","responsive","plugins","legend","position","title","display","text","grid","topRow","hostname","architecture","platform","uptime","maintainAspectRatio","network","map","bigInfo","model","proc","speed","JSON","stringify","usage"],"sources":["/home/trungn/OneDrive/nodeApp/client/src/components/Report.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Card from \"../ui/Card\";\nimport CardRegular from \"../ui/CardRegular\";\nimport NetworkReport from \"./NetworkReport\";\nimport classes from \"./Report.module.css\";\nimport {\n  Chart as Chartjs,\n  ArcElement,\n  Tooltip,\n  Legend,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n} from \"chart.js\";\nimport { Pie } from \"react-chartjs-2\";\nimport {Line} from \"react-chartjs-2\";\n\nChartjs.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale,PointElement,LineElement,Title, Tooltip, Legend);\n/**\n *\n * @param {{hostname: string, architecture: string, platform: string,uptime: string,cpu:string,memory: string,network: string,date: string}} props\n */\nfunction Report(props) {\n  const port = 5782;\n  const INTERVAL = 2000;\n  var [status, setStatus] = useState(null);\n  var local = true;\n  var [cpuData, setCpuData] = useState([]);\n\n  useEffect(() => {\n    const socket = io.connect(props.IP + \":\" + port);\n    // const socket = io.connect(\"http://localhost:5782\");\n\n    socket.emit(\"get_init\");\n    socket.on(\"send_data\", (data) => {\n      socket.close();\n      setStatus(data);\n      getStatus(data);\n    });\n    socket.on(\"error\", () => {});\n  }, []);\n\n  function getStatus(data) {\n    const socket = io.connect(props.IP + \":\" + port);\n    // const socket = io.connect(\"http://localhost:5782\");\n    socket.emit(\"get_status\", data);\n    socket.on(\"send_data\", (data) => {\n      setStatus(data);\n      setTimeout(() => {\n        getStatus(data);\n      }, INTERVAL);\n      socket.close();\n    });\n  }\n  function generateData(memory) {\n    var used = (memory.used / 1024).toFixed(1);\n    var free = (memory.total / 1024 - memory.used / 1024).toFixed(1);\n    return {\n      labels: [\"Used\", \"Free\"],\n      datasets: [\n        {\n          label: \"GB\",\n          data: [used, free],\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n          ],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\"],\n          borderWidth: 1,\n        },\n      ],\n    };\n  }\n\n  function generateDataCPU(cpu,idx) {\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Chart.js Line Chart',\n        },\n      },\n    };\n    const labels=[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];\n    const data = {\n      labels,\n      datasets:{\n        label: `CPU ${idx}`,\n        data \n      }\n    }\n  }\n  if (status === null) {\n    return (\n      <div>\n        <h1>Loading...</h1>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div className={classes.grid}>\n        <CardRegular className={classes.topRow}>\n          <div>\n            <h1>{status.hostname}</h1>\n            <b>Architecture:</b> {status.architecture}\n            <br />\n            <b>Platform:</b> {status.platform}\n            <br />\n            <b>Up Time:</b> {status.uptime} seconds\n            <br />\n          </div>\n          <Pie\n            data={generateData(status.memory)}\n            options={{ maintainAspectRatio: true, responsive: true }}\n          />\n        </CardRegular>\n        <CardRegular>\n          {status.network.map((data, idx) => {\n            return <NetworkReport key={idx} {...data} />;\n          })}\n        </CardRegular>\n        <div className={classes.bigInfo}>\n          <b>{status.cpu[0].model}</b>\n          <ul>\n            {status.cpu.map((proc, idx) => {\n              return (\n                <li key={idx}>\n                  ({proc.speed}): {JSON.stringify(proc.usage)}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Report;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}